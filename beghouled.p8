pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
board_cols=7
board_rows=7
neighbors = {
  {-1, 0},
  {1, 0},
  {0, -1},
  {0, 1}
}
last_board = {}
matches = {}
falling_objects = {}
moving_objects = {}
glowy_bois = {}
fx = {}
delayed_actions = {}
falling_spd=1
screenshake = {x=0, y=0}
score=0
mode=3
hint_timer=30*5
function _init()
  sprs = {1,2,3,17,18,19,33}
  board = new_board()
  last_board = copy_board(board)
  poke(0x5f2d,1)
  clicked=false
  -- stat(32) x
  -- stat(33) y
  -- stat(34) click
  selected = {-1,-1}
  t=0
  printh(#board)
  printh(#board[1])
  printh(board[1][1])
  printh(board[7][7])
  do_matches_optimized(board)
end

function _draw()
  cls()
  if mode==1 then
    cls()
    if #falling_objects == 0 and #moving_objects == 0 and #glowy_bois == 0 then
      printh("#falling "..#falling_objects.." #moving "..#moving_objects)
      draw_board(board)
    else
      printh("draw last board #falling "..#falling_objects.." #moving "..#moving_objects)
      draw_board(last_board)
    end
    spr(4,stat(32),stat(33))
    draw_fx()
    --print_board()
    print(stat(1), 60, 120,8)
    for ghoul in all(falling_objects) do
      --spr(board[ghoul.row][ghoul.col], ghoul.col*12, (ghoul.row*12)+12-(ghoul.t*(abs(ghoul.row-ghoul.newrow))))
      spr(board[ghoul.row][ghoul.col], ghoul.col*12, ghoul.y)
    end
    for ghoul in all(moving_objects) do
      --spr(board[ghoul.row][ghoul.col], ghoul.col*12, (ghoul.row*12)+12-(ghoul.t*(abs(ghoul.row-ghoul.newrow))))
      spr(ghoul.spr, ghoul.x, ghoul.y)
    end
    for glowy_boi in all(glowy_bois) do
      --circfill(glowy_boi.col*12+4,glowy_boi.row*12+4,4,8)
      for i=-1,1 do
        local dx = rnd(2)
        local dy = rnd(2)
        if flr(rnd(2))==0 then
          dx*=-1
        end
        if flr(rnd(2))==0 then
          dy*=-1
        end

        spr(glowy_boi.spr, glowy_boi.col*12+dx,glowy_boi.row*12+dy)
      end
    end
    print("score: "..score,0,120,8)
  elseif mode==0 then
    rectfill(0,0,128,128,1)
    spr(25, 32, 54)
    spr(41, 40, 54, 7,1)
    print("x to start",44,84,7)
  elseif mode==3 then
    print("game over!",44,54)
    print("score: "..score,47,74)
    print("x = restart", 41,84)
  end
end

function _update()
  if mode==1 then
    hint_timer-=1
    if hint_timer<=0 then
      hint_timer=30*5
      hint_spots = get_hint_spot(board)
      for hint in all(hint_spots) do
        add(glowy_bois, 
        {
          row=hint.row, col=hint.col, 
          spr=board[hint.row][hint.col],
          ttl=25,
        })
      end
    end
    do_clicks()
    update_fx()
    update_delayed_actions()
    update_glowy_bois()
    for col=1,board_cols+1 do
      if board[1][col]==0 then
        --add(falling_objects,
        --  {
        --    row=1, col=col,
        --    t=160, dy=1, y=0,fy=12
        --  }
        --)
        board[1][col] = sprs[flr(rnd(#sprs))+1]
        --do_fall(board, 1, col)
      end
    end
    for row=1,board_rows+1 do
      for col=1,board_cols+1 do
        do_fall(board, row, col)
      end
    end
    --animate()
    screenshake.x-=1
    screenshake.y-=1
    screenshake.x=max(screenshake.x, 0)
    screenshake.y=max(screenshake.y, 0)
    screenshake.x=min(3,screenshake.x)
    screenshake.y=min(3,screenshake.y)
    t+=1
    if is_game_over(board) then
      mode=3
    end
    move_ghouls()
    if #falling_objects == 0 and #moving_objects == 0 and #glowy_bois == 0 then
      do_matches_optimized(board)
    end
  elseif mode==0 then
    if btnp(5) then mode = 1 end
  elseif mode==3 then
    if btnp(5) then mode=1 _init() end
  end
end

function copy_board(board_to_copy)
  local newboard = {}
  for row=1,#board_to_copy do
    newboard[row] = {}
    for col=1,#board_to_copy[row] do
      newboard[row][col] = board_to_copy[row][col]
    end
  end
  return newboard
end

function safe_get_ghoul(board, row, col)
  if row > 0 and
     row <= board_rows+1 and
     col > 0 and
     col <= board_cols+1 then
     return board[row][col]
  else
    return false
  end
end

function do_matches_optimized(board)
  matched_ghouls = {}
  for row=1,board_rows+1 do
    for col=1,board_cols+1 do
      ghoul_to_match = safe_get_ghoul(board,row,col)
      if ghoul_to_match != 0 then
        -- check to the right
        if safe_get_ghoul(board,row,col+1)==ghoul_to_match and
          safe_get_ghoul(board,row,col+2)==ghoul_to_match then
          xmod = 1
          add(matched_ghouls, {row, col})
          while safe_get_ghoul(board,row,col+xmod)==ghoul_to_match do
            add(matched_ghouls, {row, col+xmod})
            xmod+=1
          end
        end
        -- check to the down
        if safe_get_ghoul(board,row+1,col)==ghoul_to_match and
          safe_get_ghoul(board,row+2,col)==ghoul_to_match then
          ymod = 1
          add(matched_ghouls, {row, col})
          while safe_get_ghoul(board,row+ymod,col)==ghoul_to_match do
            add(matched_ghouls, {row+ymod, col})
            ymod+=1
          end
        end
      end
    end
  end
  for ghoul in all(matched_ghouls) do
    --board[ghoul[1]][ghoul[2]] = 0
    add(glowy_bois, 
    {
      row=ghoul[1], col=ghoul[2], 
      spr=board[ghoul[1]][ghoul[2]],
      ttl=15,
    })
    add(delayed_actions,
    {
      ttl=15,
      f=boom,
      args=ghoul
    })
    --boom(ghoul)
    --board[ghoul[1]][ghoul[2]] = 0
    --last_board = copy_board(board)
  end
  score+=#matched_ghouls
end

function do_clicks()
  if clicked==false and stat(34) == 1 then
    clicked=true
    x=stat(32)
    y=stat(33)
    col=flr(((x+4)/12))
    row=flr(((y+4)/12))
    if selected[1]==-1 then
      selected={flr(col),flr(row)}
      printh(x.." "..y)
      printh(flr(selected[1]).." "..flr(selected[2]))
    elseif is_valid_selection(selected[1], selected[2], col, row) then
      local dy = (row - selected[2])
      local dx = (col - selected[1])
      last_board[row][col]=0
      last_board[selected[2]][selected[1]]=0
      add(
        moving_objects,
        {
          x=col*12,
          y=row*12,
          ttl=12,
          spr=board[row][col],
          dy=dy*-1,
          dx=dx*-1
        }
      )
      add(
        moving_objects,
        {
          x=selected[1]*12,
          y=selected[2]*12,
          ttl=12,
          spr=board[selected[2]][selected[1]],
          dy=dy,
          dx=dx
        }
      )
      add(delayed_actions,
         {ttl=10,
          f=swap_ghouls,
          args={first={row=row,col=col},
                second={row=selected[2],col=selected[1]},
                final=false}})

      
      --tmp = {}
      --tmp = board[row][col]
      --board[row][col] = board[selected[2]][selected[1]]
      --board[selected[2]][selected[1]] = tmp
      --printh("======next one=======")
      --selected={-1,-1}

    end
  end
  if t%30 == 0 then
    clicked=false
  end
end

function update_delayed_actions()
  for action in all(delayed_actions) do
    action.ttl-=1
    if action.ttl<=0 then
      del(delayed_actions, action)
      action.f(action.args)
    end
  end
end

function update_glowy_bois()
  for glowy_boi in all(glowy_bois) do
    glowy_boi.ttl-=1
    if glowy_boi.ttl<=0 then
      del(glowy_bois, glowy_boi)
    end
  end
end

function swap_ghouls(args)
  local first = args.first
  local second = args.second
  local final = args.final
  local tmp = {}
  tmp = board[first.row][first.col]
  board[first.row][first.col] = board[second.row][second.col]
  board[second.row][second.col] = tmp
  printh("======next one=======")
  selected={-1,-1}
  do_matches_optimized(board)
  if #matched_ghouls==0 and final==false then
      local dy = (first.row - second.row)
      local dx = (first.col - second.col)
      add(
        moving_objects,
        {
          x=first.col*12,
          y=first.row*12,
          ttl=12,
          spr=board[first.row][first.col],
          dy=dy*-1,
          dx=dx*-1
        }
      )
      add(
        moving_objects,
        {
          x=second.col*12,
          y=second.row*12,
          ttl=12,
          spr=board[second.row][second.col],
          dy=dy,
          dx=dx
        }
      )
    add(delayed_actions,
        {ttl=10,
        f=swap_ghouls,
        args={first=second,
              second=first, final=true}})
  end

end

function new_board()
  local board = {}
  for i=1,board_cols+1 do
    board[i] = {}
    debugstr = ""
    for j=1,board_rows+1 do
      board[i][j] = sprs[flr(rnd(#sprs))+1]
      debugstr = debugstr..", "..board[i][j]
    end
    printh(debugstr)
  end
  return board
end

function print_board()
  for i=1,board_cols+1 do
    debugstr = ""
    for j=1,board_rows+1 do
      debugstr = debugstr..", "..board[i][j]
    end
    printh(debugstr)
  end
end

function draw_board(theboard)
  modx=0
  local screenshakex = screenshake.x
  local screenshakey = screenshake.y
  if flr(rnd(2)) == 0 then screenshakex*=-1 end
  if flr(rnd(2)) == 0 then screenshakey*=-1 end
  for i=1,board_cols+1 do
    for j=1,board_rows+1 do
      --printh("debug i + j "..i.." + "..j.." = "..(i+j).." mod2 "..((i+j)%2))
      if (i+j)%2==0 then
        for k=-2,9 do
          for l=-2,9 do
            pset(j*12+k+screenshakex, i*12+l+screenshakey, 1)
          end
        end
      end
      spr(theboard[i][j],j*12+screenshakex,i*12+screenshakey)
    end
  end
  if selected[1] >=0 then
    rect((selected[1]*12)-2,
         (selected[2]*12)-2,
         (selected[1]*12)+10,
         (selected[2]*12)+10,8)
  end
end

function do_fall(board, row, col)
  -- check below yourself, if you can fall, move down
  -- check every spot for objects that need to fall, apply fall to it
  --board[row][col] = 0
  local ymod = 1
  while (ymod + row) < board_rows+2 and board[row+ymod][col] == 0 do
    ymod +=1
  end
  ymod-=1 -- back up
  if ymod > 0 and board[row][col] != 0 then
    -- todo check if this falling obj already exist in falling_objs
    if already_falling(row,col) == false then
      add(falling_objects,
        {
          row=row, col=col, newrow=row+ymod, newcol=col,
          t=160, dy=1, y=(row*12)-12,fy=(row+ymod-1)*12
        }
      )
      last_board[row][col] = 0
      board[row+ymod][col] = board[row][col]

      board[row][col] = 0
    end

    last_board = copy_board(board)

    printh("row "..row.." col "..col.." newrow "..(row+ymod).." y "..((row*12)-12).." fy "..((row+ymod-1)*12))
  end
end

function already_falling(row, col)
  for falling_obj in all(falling_objects) do
    if falling_obj.row == row and falling_obj.col == col then
      return true
    end
  end
  return false
end
function boom(boom_spot)
  local dx=rnd(5)
  local cols = {1,2,3,6,13}
  local c=cols[flr(rnd(#cols))+1]
  if flr(rnd(2)) == 0 then
    dx*=-1
  end
  add(fx, {type="boom",dx=dx, c=c,r=0, y=boom_spot[1]*12, x=boom_spot[2]*12, ttl=20, f=explode})
  add(fx, {type="boom",dx=dx+rnd(3), c=c,r=0, y=boom_spot[1]*12, x=boom_spot[2]*12, ttl=20, f=explode})
  add(fx, {type="boom",dx=dx+rnd(3), c=c,r=0, y=boom_spot[1]*12, x=boom_spot[2]*12, ttl=20, f=explode})
  screenshake.x+=rnd(2)
  screenshake.y+=rnd(2)
  board[boom_spot[1]][boom_spot[2]] = 0
  hint_timer=30*5
end

function explode(f)
  f.r+=f.dx
  f.ttl-=1
  if f.ttl<=0 then del(fx, f) end
end

function update_fx()
  for ef in all(fx) do
    ef.f(ef)
  end
end

function draw_fx()
  for ef in all(fx) do
    if ef.type=="boom" then
      circ(ef.x, ef.y, ef.r, ef.c)
    end
  end
end

function move_ghouls()
  for ghoul in all(falling_objects) do
    ghoul.t-=1
    ghoul.dy*=1.1
    --ghoul.dy=0.5
    ghoul.y=ghoul.y+ghoul.dy
    if ghoul.t<=0 or ghoul.y>=ghoul.fy then
      del(falling_objects, ghoul)
      last_board = copy_board(board)
    end
  end
  for ghoul in all(moving_objects) do
    ghoul.x+=ghoul.dx
    ghoul.y+=ghoul.dy
    ghoul.ttl-=1
    if ghoul.ttl<=0 then
      del(moving_objects, ghoul)
      last_board = copy_board(board)
    end
  end
end

function check_coords_exist(arr, item)
  for a in all(arr) do
    if item[1] == a[1] and item[2] == a[2] then return true end
  end
  return false
end

function is_valid_selection(oldcol, oldrow, newcol, newrow)
  return abs(newcol - oldcol) + abs(newrow - oldrow) <= 1
end

function is_game_over(board)
  -- eight possible patterns for a close match
  local move_patterns = {
    {{1,1},{1,2},{1,4}},
    {{1,1},{1,3},{1,4}},
    {{1,1},{2,2},{3,2}},
    {{1,1},{2,1},{3,2}},
    {{1,2},{2,1},{3,2}},
    {{1,1},{2,2},{3,1}},
    {{1,2},{2,2},{3,1}},
    {{1,2},{2,1},{3,1}},
  }
  local move_patterns = {
    {{0,0},{0,1},{0,3}},
    {{0,0},{0,2},{0,3}},
    {{0,0},{1,1},{2,1}},
    {{0,0},{1,0},{2,1}},
    {{0,1},{1,0},{2,1}},
    {{0,0},{1,1},{2,0}},
    {{0,1},{1,1},{2,0}},
    {{0,1},{1,0},{2,0}},
  }
  -- go over every cell and look all around for this pattern,
  -- also look in inverted pattern too
  -- if any of them match return false
  for row=1,board_rows+1 do
    for col=1,board_cols+1 do
      for pattern in all(move_patterns) do
        if (
          safe_get_ghoul(board, row+pattern[1][1], col+pattern[1][2]) ==
          safe_get_ghoul(board, row+pattern[2][1], col+pattern[2][2]) and 
          safe_get_ghoul(board, row+pattern[2][1], col+pattern[2][2]) ==
          safe_get_ghoul(board, row+pattern[3][1], col+pattern[3][2]) and
          safe_get_ghoul(board, row+pattern[1][1], col+pattern[1][2]) != false
        ) or (
          safe_get_ghoul(board, row+pattern[1][2], col+pattern[1][1]) ==
          safe_get_ghoul(board, row+pattern[2][2], col+pattern[2][1]) and
          safe_get_ghoul(board, row+pattern[2][2], col+pattern[2][1]) ==
          safe_get_ghoul(board, row+pattern[3][2], col+pattern[3][1]) and
          safe_get_ghoul(board, row+pattern[1][2], col+pattern[1][1]) != false
        ) then
          return false
        end
      end
    end
  end
  return true
end

function get_hint_spot(board)
  -- eight possible patterns for a close match
  local move_patterns = {
    {{1,1},{1,2},{1,4}},
    {{1,1},{1,3},{1,4}},
    {{1,1},{2,2},{3,2}},
    {{1,1},{2,1},{3,2}},
    {{1,2},{2,1},{3,2}},
    {{1,1},{2,2},{3,1}},
    {{1,2},{2,2},{3,1}},
    {{1,2},{2,1},{3,1}},
  }
  local move_patterns = {
    {{0,0},{0,1},{0,3}},
    {{0,0},{0,2},{0,3}},
    {{0,0},{1,1},{2,1}},
    {{0,0},{1,0},{2,1}},
    {{0,1},{1,0},{2,1}},
    {{0,0},{1,1},{2,0}},
    {{0,1},{1,1},{2,0}},
    {{0,1},{1,0},{2,0}},
  }
  -- go over every cell and look all around for this pattern,
  -- also look in inverted pattern too
  -- if any of them match return false
  for row=1,board_rows+1 do
    for col=1,board_cols+1 do
      for pattern in all(move_patterns) do
        if (
          safe_get_ghoul(board, row+pattern[1][1], col+pattern[1][2]) ==
          safe_get_ghoul(board, row+pattern[2][1], col+pattern[2][2]) and 
          safe_get_ghoul(board, row+pattern[2][1], col+pattern[2][2]) ==
          safe_get_ghoul(board, row+pattern[3][1], col+pattern[3][2]) and
          safe_get_ghoul(board, row+pattern[1][1], col+pattern[1][2]) != false
        ) then
          return {
            {row=row+pattern[1][1],col=col+pattern[1][2]},
            {row=row+pattern[2][1],col=col+pattern[2][2]},
            {row=row+pattern[3][1],col=col+pattern[3][2]},
          }
        elseif (
          safe_get_ghoul(board, row+pattern[1][2], col+pattern[1][1]) ==
          safe_get_ghoul(board, row+pattern[2][2], col+pattern[2][1]) and
          safe_get_ghoul(board, row+pattern[2][2], col+pattern[2][1]) ==
          safe_get_ghoul(board, row+pattern[3][2], col+pattern[3][1]) and
          safe_get_ghoul(board, row+pattern[1][2], col+pattern[1][1]) != false
        ) then
          return {
            {row=row+pattern[1][2],col=col+pattern[1][1]},
            {row=row+pattern[2][2],col=col+pattern[2][1]},
            {row=row+pattern[3][2],col=col+pattern[3][1]},
          }
        end
      end
    end
  end
end

__gfx__
000000000000b300000eed0000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000b300000eeddd000000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000a9999400eecdcdd50555005007007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000a9d999140eccdccd55555505000880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000a9dd91140edddddd55555550000880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000999999940edcccdd05000050007007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000099ddd1940ddddddd05000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000099999400d0d0d0d05000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000007770007777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000777007777707766660000000000000000000000000000000000000000000eeeedd0000000000000000000000000000000000000000000000000
0000000000099977077878777600006000000000000000000000000000000000000000000e00000d000000000000000000000000000000000000000000000000
000000000a999996078878875000000600000000000000000000000000000000000000000e00000d000000000000000000000000000000000000000000000000
000000000aa99990077707770500000000000000000000000000000000000000000000000e0eedd0000000000000000000000000000000000000000000000000
000000000aaa9940007777700055000000000000000000000000000000000000000000000d00000d000000000000000000000000000000000000000000000000
000000000aaa9400007070700000550000000000000000000000000000000000000000000d00000d000000000000000000000000000000000000000000000000
0000000000aaa000000777000000005500000000000000000000000000000000000000000dddddd0000000000000000000000000000000000000000000000000
0000000000000e000007b30000000000000000000000000000000000000000000000000000000000000000000000b30000000000000000000000000000000000
0000000000000e200076635000000000000000000000000000000000000000000000000000eeddd00e0000d0000b30000e0000e00e00000000eedd000eeedd00
00000000000ee222076633650000000000000000000000000000000000000000000000000e00000d0e0000d00a9999400e0000e00e0000000e0000000e0000d0
0000000000e89e00076636650000000000000000000000000000000000000000000000000e0000000e0000d0a9d999140e0000d00e0000000e0000000e0000d0
0000000000e98e00076663650000000000000000000000000000000000000000000000000e000dd00eeeddd0a9dd91140e0000d00e0000000eedd0000e0000d0
00000000ee2ee000066666650000000000000000000000000000000000000000000000000d00000d0e0000d0999999940d0000d00d0000000d0000000d0000d0
0000000002200000066666650000000000000000000000000000000000000000000000000d00000d0e0000d099ddd1940d0000d00d0000000d0000000d0000d0
00000000002000000655454200000000000000000000000000000000000000000000000000ddddd00d0000d00999994000dddd0000ddddd000dddd000ddddd00
__label__
11177711110007777000001111111e1111000777700000111111115111000007770000111111b311110000000e00000000000000000000000000000000000000
11777771110077666600001111111e211100776666000011111111151100007777700011111b3111110000000e20000000000000000000000000000000000000
177171771100760000600011111ee22211007600006000115155511511000770707700111a9999411100000ee222000000000000000000000000000000000000
17117117110050000006001111e89e111100500000060011555555151100070070070011a9d99914110000e89e00000000000000000000000000000000000000
17771777110005000000001111e98e111100050000000011555555511100077707770011a9dd9114110000e98e00000000000000000000000000000000000000
117777711100005500000011ee2ee1111100005500000011151111511100007777700011999999941100ee2ee000000000000000000000000000000000000000
11717171110000005500001112211111110000005500001115111151110000707070001199ddd194110002200000000000000000000000000000000000000000
11177711110000000055001111211111110000000055001115111151110000077700001119999941110000200000000000000000000000000000000000000000
11111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000000000000000
11111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
077770000011111ddd1111000000b30000111111b31111000000000000111111b31111000000b300001111111151110000000000000000000000000000000000
77666600001111ddddd11100000b30000011111b31111100000007770011111b31111100000b3000001111111115110000000000000000000000000000000000
7600006000111dd1d1dd11000a99994000111a99994111000009997700111a99994111000a999940001151555115110000000000000000000000000000000000
5000000600111d11d11d1100a9d999140011a9d9991411000a9999960011a9d999141100a9d99914001155555515110000000000000000000000000000000000
0500000000111ddddddd1100a9dd91140011a9dd911411000aa999900011a9dd91141100a9dd9114001155555551110000000000000000000000000000000000
0055000000111dd111dd11009999999400119999999411000aaa9940001199999994110099999994001115111151110000000000000000000000000000000000
0000550000111ddddddd110099ddd194001199ddd19411000aaa9400001199ddd194110099ddd194001115111151110000000000000000000000000000000000
0000005500111d1d1d1d110009999940001119999941110000aaa000001119999941110009999940001115111151110000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
11111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000000000000000
11111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000000000000000
111777111100000ddd000011111111511100000ddd000011111ddd111100000ddd00001111111e1111000000b300000000000000000000000000000000000000
11777771110000ddddd0001111111115110000ddddd0001111ddddd1110000ddddd0001111111e211100000b3000000000000000000000000000000000000000
1771717711000dd0d0dd00115155511511000dd0d0dd00111dd1d1dd11000dd0d0dd0011111ee22211000a999940000000000000000000000000000000000000
1711711711000d00d00d00115555551511000d00d00d00111d11d11d11000d00d00d001111e89e111100a9d99914000000000000000000000000000000000000
1777177711000ddddddd00115555555111000ddddddd00111ddddddd11000ddddddd001111e98e111100a9dd9114000000000000000000000000000000000000
1177777111000dd000dd00111511115111000dd000dd00111dd111dd11000dd000dd0011ee2ee111110099999994000000000000000000000000000000000000
1171717111000ddddddd00111511115111000ddddddd00111ddddddd11000ddddddd001112211111110099ddd194000000000000000000000000000000000000
1117771111000d0d0d0d00111511115111000d0d0d0d00111d1d1d1d11000d0d0d0d001111211111110009999940000000000000000000000000000000000000
11111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000000000000000
11111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
00000e000011111ddd111100077770000011111ddd11110000000e00001111111e1111000000000000111111b311110000000000000000000000000000000000
00000e20001111ddddd1110077666600001111ddddd1110000000e20001111111e211100000007770011111b3111110000000000000000000000000000000000
000ee22200111dd1d1dd11007600006000111dd1d1dd1100000ee2220011111ee22211000009997700111a999941110000000000000000000000000000000000
00e89e0000111d11d11d11005000000600111d11d11d110000e89e00001111e89e1111000a9999960011a9d99914110000000000000000000000000000000000
00e98e0000111ddddddd11000500000000111ddddddd110000e98e00001111e98e1111000aa999900011a9dd9114110000000000000000000000000000000000
ee2ee00000111dd111dd11000055000000111dd111dd1100ee2ee0000011ee2ee11111000aaa9940001199999994110000000000000000000000000000000000
0220000000111ddddddd11000000550000111ddddddd11000220000000111221111111000aaa9400001199ddd194110000000000000000000000000000000000
0020000000111d1d1d1d11000000005500111d1d1d1d110000200000001111211111110000aaa000001119999941110000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
11111111110000000000001111111111110000000070071111111111110000000000001111111111110000000000000000000000000000000000000000000000
11111111110000000000001111111111110000000008801111111111110000000000001111111111110000000000000000000000000000000000000000000000
11111e111100077770000011111ddd111100000ddd08801111111e1111000000b300001111111151110000077700000000000000000000000000000000000000
11111e21110077666600001111ddddd1110000dddd70071111111e211100000b3000001111111115110000777770000000000000000000000000000000000000
111ee22211007600006000111dd1d1dd11000dd0d0dd0011111ee22211000a999940001151555115110007707077000000000000000000000000000000000000
11e89e1111005000000600111d11d11d11000d00d00d001111e89e111100a9d99914001155555515110007007007000000000000000000000000000000000000
11e98e1111000500000000111ddddddd11000ddddddd001111e98e111100a9dd9114001155555551110007770777000000000000000000000000000000000000
ee2ee11111000055000000111dd111dd11000dd000dd0011ee2ee111110099999994001115111151110000777770000000000000000000000000000000000000
1221111111000000550000111ddddddd11000ddddddd001112211111110099ddd194001115111151110000707070000000000000000000000000000000000000
1121111111000000005500111d1d1d1d11000d0d0d0d001111211111110009999940001115111151110000077700000000000000000000000000000000000000
11111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000000000000000
11111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
00000000001111111e11110007777000001117777111110000000e00001111111151110000000000001111177711110000000000000000000000000000000000
00000777001111111e21110077666600001177666611110000000e20001111111115110000000777001111777771110000000000000000000000000000000000
000999770011111ee2221100760000600011761111611100000ee222001151555115110000099977001117717177110000000000000000000000000000000000
0a999996001111e89e11110050000006001151111116110000e89e0000115555551511000a999996001117117117110000000000000000000000000000000000
0aa99990001111e98e11110005000000001115111111110000e98e0000115555555111000aa99990001117771777110000000000000000000000000000000000
0aaa99400011ee2ee1111100005500000011115511111100ee2ee00000111511115111000aaa9940001111777771110000000000000000000000000000000000
0aaa940000111221111111000000550000111111551111000220000000111511115111000aaa9400001111717171110000000000000000000000000000000000
00aaa000001111211111110000000055001111111155110000200000001115111151110000aaa000001111177711110000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
11111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000000000000000
11111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000000000000000
11111111110000000050001111177711110000000e000011177771111100000ddd00001111177711110000077700000000000000000000000000000000000000
11111777110000000005001111777771110000000e20001177666611110000ddddd0001111777771110000777770000000000000000000000000000000000000
111999771100505550050011177171771100000ee22200117611116111000dd0d0dd001117717177110007707077000000000000000000000000000000000000
1a999996110055555505001117117117110000e89e0000115111111611000d00d00d001117117117110007007007000000000000000000000000000000000000
1aa99991110055555550001117771777110000e98e0000111511111111000ddddddd001117771777110007770777000000000000000000000000000000000000
1aaa99411100050000500011117777711100ee2ee00000111155111111000dd000dd001111777771110000777770000000000000000000000000000000000000
1aaa941111000500005000111171717111000220000000111111551111000ddddddd001111717171110000707070000000000000000000000000000000000000
11aaa11111000500005000111117771111000020000000111111115511000d0d0d0d001111177711110000077700000000000000000000000000000000000000
11111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000000000000000
11111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
0000005000111117771111000000000000111111115111000000b300001111111e111100077770000011111ddd11110000000000000000000000000000000000
000000050011117777711100000007770011111111151100000b3000001111111e21110077666600001111ddddd1110000000000000000000000000000000000
5055500500111771717711000009997700115155511511000a9999400011111ee22211007600006000111dd1d1dd110000000000000000000000000000000000
5555550500111711711711000a9999960011555555151100a9d99914001111e89e1111005000000600111d11d11d110000000000000000000000000000000000
5555555000111777177711000aa999900011555555511100a9dd9114001111e98e1111000500000000111ddddddd110000000000000000000000000000000000
0500005000111177777111000aaa99400011151111511100999999940011ee2ee11111000055000000111dd111dd110000000000000000000000000000000000
0500005000111171717111000aaa9400001115111151110099ddd19400111221111111000000550000111ddddddd110000000000000000000000000000000000
05000050001111177711110000aaa00000111511115111000999994000111121111111000000005500111d1d1d1d110000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
00000000001111111111110000000000001111111111110000000000001111111111110000000000001111111111110000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


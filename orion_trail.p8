pico-8 cartridge // http://www.pico-8.com
version 15
__lua__

function _init()
 mode=0
 driving_init()
 player_sel_init()
end

function _update()
 
 if mode==0 then
   driving_update()
 elseif mode==1 then
   player_sel_update()
 end
end

function _draw()
  cls()
  if mode==0 then
    driving_draw()
  elseif mode==1 then
    player_sel_draw()
  end
end



-->8
-- start with one player
-- add selectable players later
-- which can add modifiers to gameplay
-- make it so there are >1 players later?

function player_sel_init()
 players = {}
 player_inv = {
   {name="gas",total=98,cost=20},
   {name="food",total=1234,cost=2},
   {name="tires",total=0,cost=40}

 }
 player = {
   health=100,
   max_health=100,
   money=100,

 }

 store_money = 200
 index = 1
 index_y = 28
 store_inv = {
   {name="gas",total=10,cost=20},
   {name="food",total=100,cost=2},
   {name="tires",total=4,cost=40}
 }
end

function player_sel_update()
  if btnp(2) and index > 1 then
    index-=1
  elseif btnp(3) and index < #store_inv then
    index+=1
  end
  if btnp(5) then
    player.money,
    store_money,
    player_inv,
    store_inv = xchange_item(index,
    player.money,
    store_money,
    player_inv,
    store_inv)
  elseif btnp(4) then
    store_money,
    player.money,
    store_inv,
    player_inv = xchange_item(index,
    store_money,
    player.money,
    store_inv,
    player_inv)
  end
  --if index_y < 28 + (index-1*8)  then
  --  index_y+=1
  --end
end

function player_sel_draw()
  print("store inventory:", 10,10,7)
  for i=1,#store_inv do
    if i==index then
      rectfill(0,(i*10)+18,128,(i*10)+18+8,5)
    end
    print(store_inv[i].name,10,i*10+20,7)
    print("$"..store_inv[i].cost,30,i*10+20,7)
    print("stock:"..store_inv[i].total,50,i*10+20,7)

  end
  print("your inventory:",10,70,7)
  print("money: $"..player.money,10,80,7)

  for i=1,#player_inv do
    print(player_inv[i].name,10,i*10+80,7)
    print("stock:"..player_inv[i].total,50,i*10+80,7)

  end

  print("arrows + z/x",128-45,128-10,7)
end

function xchange_item(index,
				            	buyer_money,
				            	seller_money,
				            	buyer_inv,
				            	seller_inv)
  if buyer_money >= seller_inv[index].cost
     and seller_inv[index].total>=1 then
    buyer_money-=seller_inv[index].cost
    seller_money+=buyer_inv[index].cost
    buyer_inv[index].total+=1
    seller_inv[index].total-=1  
  end
  return buyer_money,
         seller_money,
         buyer_inv,
         seller_inv
end

-->8
function driving_init()
  plx_layers = {}
  stars = {}
  stars_colors = {7,6}
  driving = true
  car = {}
  car.x=70
  car.y=70
  car.sprs = {}
  car.sprs.top = {1,2,3,4}
  car.sprs.bot = {17,18,19,20}
  car.bump_timer=0  
  car.ant_sprs = {5,6,7,8,8,7,6,5}
  car.ant_frame = 1
  car.t=0
  car.ant_step=8
  car.dust = {}
  car.dust.colors = {13,6,7}
  car.dust.particles = {}
  car.health=45
  car.max_health=100
  car.driving_time = 0

  next_checkpoint = 200
  car.total_distance = 4
  t=0
  create_plx_layer(0,60,16,1,-.25,64,2)  
  create_plx_layer(0,62,16,1,-.5,80,13)

  for i=0,flr(rnd(15)) do
    local star = {}
    star.x=rnd(128)
    star.y=rnd(65)
    star.r=1
    star.c=stars_colors[flr(rnd(#stars_colors))+1]
    add(stars,star)
  end
end

function driving_update()
  t+=0.01
  car.t=(car.t+1)%car.ant_step
  if (car.t==0) then
      car.ant_frame=(car.ant_frame+1)%#car.ant_sprs
  end
  if flr(t)%1==0 then
    create_dust_particles()
  end
  foreach(car.dust.particles, update_dust_particle)
  foreach(plx_layers,update_plx)
  if driving == true then
    car.driving_time+=1
    if car.driving_time%(30*1)==0 then
      car.health-=1
      next_checkpoint-=1
      car.total_distance+=1
      player_inv[1].total-=1
      player_inv[2].total-=10
    end
  end

end

function driving_draw()
  
  -- draw ground
  rectfill(0,67,128,128,1)
    
  for star in all(stars) do
   pset(star.x, star.y, star.c)
  end
  
  -- draw moon
  circfill(25,25,10,6)
  circfill(27,25,10,7)

  -- draw parralax scrollers
  foreach(plx_layers,draw_plx)

  rect(0,0,127,127,7)

  --
  draw_hud()

  pal(13,5)
  draw_car()
  pal()
end

function draw_hud()
  rectfill(0,89,128,128,7)
  rectfill(1,90,126,126,5)
  print("vehicle:", 5, 94, 6)
  draw_bar(car.health, car.max_health, 35, 6, 40, 93)
  print("health:", 5, 102, 6)
  draw_bar(player.health, player.max_health, 35, 6, 40, 93+8)

  print("gas: ",5,110,6)
  print(player_inv[1].total.."l",
        69-offset_x(player_inv[1].total),
        110, 6)
  print("food: ", 5, 118, 6)
  
  
  print(player_inv[2].total.."kg",
        65-offset_x(player_inv[2].total),
        118, 6)


  print("next chkpnt", 80, 94, 6)
  print(next_checkpoint.."km",
        115-offset_x(next_checkpoint), 102, 6)
  print("total: ", 80, 110, 6)
  print(car.total_distance.."km",
        115-offset_x(car.total_distance), 118, 6)

end

function draw_bar(val,max,len,height,x,y)
  local color = 3
  --background of bar
  rectfill(x, y, x+len, y+height,6)
  -- progress bar
  local progress = (val / max) * len
  if val / max <= .5 then
    color = 9
  elseif val / max <= .25 then
    color = 8
  end
  rectfill(x+1, y+1, x+progress-1, y+height-1, color)
end

function offset_x(number)
  -- calc modx to move score according to # of digits
  local digits=number
  local modx=0
  while flr(digits/10) > 0 do
    modx+=4
    digits=flr(digits/10)
  end
  return modx
end

function draw_car()
  for i=1,#car.sprs.top do
    spr(car.sprs.top[i],
        car.x+(8*i),
        car.y-(sin(t%100)))
  end
  for i=1,#car.sprs.bot do
    spr(car.sprs.bot[i],
        car.x+(8*i),
        car.y+8-(sin(t%100)))
  end
  for i=1,6 do
    circfill(car.x+10+4*i,
             car.y+11-(sin(t%100))+sin(.5-i/5+t*10)/2,1,7)

  end 
  -- draw antenna
  spr(car.ant_sprs[car.ant_frame+1],
      car.x+28,
      car.y-4-(sin(t%100)))

  -- draw trailing dust
  foreach(car.dust.particles,
          draw_dust_particle)
  
end

function create_plx_layer(x,y,w,h,spd,sp,c)
  local layer = {}
  layer.x=x
  layer.y=y
  layer.w=w
  layer.h=h
  layer.spd=spd
  layer.sp=sp
  layer.c=c
  add(plx_layers,layer)
end

function update_plx(plx_layer)
  plx_layer.x-=plx_layer.spd
  if plx_layer.x>=plx_layer.w*8 then
    plx_layer.x=-plx_layer.w*8
  end
end

function draw_plx(plx_layer)
  pal(13,plx_layer.c)
  spr(plx_layer.sp,
      plx_layer.x,
      plx_layer.y,
      plx_layer.w,
      plx_layer.h)
  spr(plx_layer.sp,
      plx_layer.x-8*plx_layer.w,
      plx_layer.y,
      plx_layer.w,
      plx_layer.h)
  spr(plx_layer.sp,
      plx_layer.x+8*plx_layer.w,
      plx_layer.y,
      plx_layer.w,
      plx_layer.h)
  pal()
end

function create_dust_particles()
  for i=1,rnd(flr(5)) do
    local part = {}
    part.x=car.x+rnd(10)+15
    part.y=car.y+15
    part.c=car.dust.colors[flr(rnd(#car.dust.colors))+1]
    part.r=rnd(2)
    part.dx=rnd(4)
    part.dy=-(rnd(2))
    part.t=0
    add(car.dust.particles, part)
  end
end

function update_dust_particle(part)
  part.x+=part.dx
  part.y+=part.dy
  part.t+=1
  if part.dx > 0 then
    part.dx+=.1
  end
  if part.dy < 0 then
    part.dy+=.1
  end
  if part.t%30==0 then
    part.r-=1
  end
  if part.r<0 then
    del(car.dust.particles, part)
  end
end

function draw_dust_particle(part)
  circfill(part.x,part.y,
           part.r,part.c)
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000070000007770000077770000777770000000000000000000000000000000000000000000000000000000000
00077000000000066666666666666666600000000076000007667000076667007666667000000000000000000000000000000000000000000000000000000000
000770000000006ddddddd6dddddddddd60000000007600000765700076656707665667000000000000000000000000000000000000000000000000000000000
00700700000006dd77777d6d777dd777dd6000000007760000076670007666707666667000000000000000000000000000000000000000000000000000000000
0000000000006ddd77777d6d777dd777ddd600000000077000007770000777700777770000000000000000000000000000000000000000000000000000000000
000000000006dddddddddd6ddddddddddddd60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000666666666666666666666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000555555555555555555555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000005dddddddddddddddddddddd500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000005dddddddddddddddddddd5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000555555555555555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000ddd00000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000ddd00000000000
00000dddddddd00000000000000dd000000000dd0000000000000000000dd00000000000000d000000000dddd0000000000000000000000000dddd0000000000
0000dddddddddd00000000000ddddd0000000ddd00000000000dd000000dddd00000000000dd00000000ddddddd0000000000000000dd0000dddddd000000000
0ddddddddddddd00000000ddddddddd000000ddd000000dd00dddddd00dddddd000000dd0dddd0dd0ddddddddddd0dd0000000dd00dddddd0ddddddd000000d0
dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000d0000dd00000000000000000000dd0000000000000000d000000000000000000000000000000000dd00000000000000000000000000
00dd0000000000000000dd0000ddd0000d00000000dd0000dd000d000000000000dd000000000000000d000000d000d00000dd00000000000000dd0d00000000
0ddd0000000dd000000ddd0000dddd000d00000000dd0000dd00dd000000dd0000ddd0dd00000d0000ddd0000dd000d00d00dd000000d000000ddd0d000d0000
0ddd000000dddd000000000000d00000000dd000000d0000000dd0000000d00000d0d00000000d000dd0dd000dd000000d00dd00000ddd00000ddd0d00dd0000
